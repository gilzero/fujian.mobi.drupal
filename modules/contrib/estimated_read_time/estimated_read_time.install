<?php

/**
 * @file
 * Install hooks for estimated_read_time.
 */

use Drupal\Core\Entity\Sql\SqlContentEntityStorage;

/**
 * Sets the words per minute setting for each read time field.
 */
function estimated_read_time_update_8101() {
  if (!$fieldStorageConfigs = \Drupal::entityTypeManager()->getStorage('field_storage_config')->loadByProperties(['type' => 'estimated_read_time'])) {
    return;
  }

  foreach ($fieldStorageConfigs as $fieldStorage) {
    $fieldName = $fieldStorage->getName();

    if (!$fields = \Drupal::entityTypeManager()->getStorage('field_config')->loadByProperties(['field_name' => $fieldName])) {
      continue;
    }

    foreach ($fields as $field) {
      $field->setSetting('words_per_minute', 230);
      $field->save();
    }
  }
}

/**
 * Add auto settings to configuration.
 */
function estimated_read_time_update_8102() {
  $manager = \Drupal::entityDefinitionUpdateManager();
  $field_map = \Drupal::service('entity_field.manager')
    ->getFieldMapByFieldType('estimated_read_time');

  $schema = \Drupal::database()->schema();

  foreach ($field_map as $entity_type_id => $fields) {

    foreach (array_keys($fields) as $field_name) {
      $field_storage_definition = $manager->getFieldStorageDefinition($field_name, $entity_type_id);
      if ($field_storage_definition === NULL) {
        continue;
      }
      $storage = \Drupal::entityTypeManager()->getStorage($entity_type_id);

      if ($storage instanceof SqlContentEntityStorage) {
        /** @var \Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
        $table_mapping = $storage->getTableMapping([
          $field_name => $field_storage_definition,
        ]);
        $table_names = $table_mapping->getDedicatedTableNames();
        $columns = $table_mapping->getColumnNames($field_name);

        foreach ($table_names as $table_name) {
          $field_schema = $field_storage_definition->getSchema();
          $field_exists = $schema->fieldExists($table_name, $columns['auto']);
          $table_exists = $schema->tableExists($table_name);

          if (!$field_exists && $table_exists) {
            $schema->addField($table_name, $columns['auto'], $field_schema['columns']['auto']);
          }
        }
      }
      $manager->updateFieldStorageDefinition($field_storage_definition);
    }
  }
}
